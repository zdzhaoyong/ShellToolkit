#!/bin/sh
##BEGIN_INTRODUCTION##
#This package is aim to help linux users to collect their own bash shells and got better experience.You can doing a lot of things eazily by this tool,such as cd to a folder faster,auto config your Makefile eviroment,help you remember program history thing and comlete your paraments later,and so on.Enjoy it!
#Email:zd5945@126.com
##END_INTRODUCTION##

#####################  Build in Things   ######################
Call_Path=$(pwd) #Where this call from?
#Where is here?
if [ -n "$Function_Path" ];then
	Here_Path=$Function_Path
else
	Here_Path=$(dirname $(readlink -f $0))
	Function_Path="$Here_Path/functions"
fi
#Who am I?
if [ -n "$Function_Name" ];then
	File_Name=$Function_Name.func
else
	File_Name=${0##*/};
	Function_Name=${File_Name%.*};
fi

echo_introduction() #Introduce myself
{
	more $Here_Path/README
}

echo_help() #Echo my help or others'
{
	if [ -n "$1" ];then
		FILE_Content=$(cat < $1)
	else
		FILE_Content=$(cat < $Here_Path/$File_Name)
	fi
	HELP=${FILE_Content##*##BEGIN_HELP##};
	HELP=${HELP%##END_HELP##*};
	echo "usage:  $Function_Name [options values]"
	echo options:"$HELP"---------------------By ZhaoYong-----------------
}

#####################  Build in Things   ######################

show_introduction() #Introduce the functions in the lists
{
	while [ -n "$1" ] ;do
		export Function_Name=$1;
		echo -e "\033[32m $1: \033[0m" ;
		bash $Function_Path/$1.func -i
		shift 1
	done
}

introduce_all() #Introduce all functions in the folder $Function_Path
{
	export Function_Path
	show_introduction $(cd $Function_Path && ls *.func|sed 's/\(.*\)\..*$/\1/')
}

add_new()	#Add a new function
{
	if [ -n "$1" ]; then
		function_name=$1;shift 1;
		cat $Function_Path/example.func >> $Function_Path/$function_name.func
		gedit $Function_Path/$function_name.func
	else
		echo "Please input a function_name!"
	fi
}

edit()		#Edit myself or the assigned function
{
	if [ -n "$1" ]; then
		gedit "$Function_Path/$1.func"
	else
		gedit $0
	fi
}

history()	#Show the history
{
	if [ "$1" = "-clear" ];then
		echo ----------cleared $(date)------------------ > $Function_Data_Path/history.txt
	else
		more $Function_Data_Path/history.txt
	fi
}

Install()	#Install this package
{
    cp -u -r $Here_Path/Include/Data $Here_Path
	echo "#Function support by ZhaoYong">>~/.bashrc
	echo "export Function_Top=$Here_Path">>~/.bashrc
	echo ". \$Function_Top/Setup.sh">> ~/.bashrc
    Function_Top=$Here_Path
    . $Function_Path/Here_Name.func config_shell $Here_Path
    echo "The package installed,you need to restart your terminal before using it!"
    exit
}

addlist()	#Add the current parament list to the complete file
{
	while [ -n "$2" ];do
		. $Function_Path/add_complete.func $1 $2
		shift 1
	done
}

file_function()	#Call the function
{
	addlist "function" $*;
	Function_Name=$1;
	shift 1;
	if [ -f "$Function_Path/$Function_Name.func" ]; then
		. $Function_Path/$Function_Name.func $*
	else
		$Function_Name $*
	fi
    exit;
}

######################  main below  #######################
if [ -f "$Here_Path/Data/history.txt" ];then
    echo "------------------"$(date)------------------ >> $Here_Path/Data/history.txt
    echo "function $*" >>  $Here_Path/Data/history.txt
fi

if [ -n "$1" ]; then
	echo  "----------------------$1-------------------------------"

	while [ -n "$1" ]; do
	case $1 in
##BEGIN_HELP##
	-all|-s)        shift 1;introduce_all;exit 1;;      #                Introduce all functions
	-a|-add)        shift 1;add_new $*;exit 1;;         #[Function_Name] Add a new function
	-edit)          shift 1;edit $*;exit 1;;            #[Function_Name] Edit the function_file
	-history|-log)  shift 1;history $*;exit 1;;             #[-clear]        Show the history or clear it
	-h|-help|--h*)  shift 1;echo_help $*;exit 1;;       #                Show usages
	-i)             shift 1;echo_introduction;exit 1;;  #                Intorduce the function
	-ins|install)   shift 1;Install;exit 1;;            #                Intorduce the function
	--)             shift;break;;                       #                End of options
	-*)             echo "error: no such option $1. -h for help";exit 1;;
	*)              file_function $*;exit 1;;           #                Call function here
##END_HELP##
	esac
	done
else
	echo_help;
fi
echo  ----------------------BY ZHAOYONG---------------------------------
exit 0

